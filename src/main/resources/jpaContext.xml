<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
      http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.8.xsd
      http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">


	<!-- This file define JPA and Hibernate related configurations. As defined 
		in the web.xml this file path is classpath:/jpaContext.xml. Now any file 
		created under src/main/resources folder in a maven project will be automatically 
		added by Maven to the classpath. -->

	<!-- Indicate that the application is annotation driven -->

	<context:annotation-config />

	<!-- Specifies the base package for the jpa repositories scan. -->

	<jpa:repositories base-package="palit.suchitto.springhibernate" />

	<!--This is necessary to process the Persistence Unit, Persistence Context 
		annotations and for injecting JPA related resources -->

	<bean
		class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />

	<!-- This is the bean for EntityManagerFactory which lists the various JPA 
		related properties/resources. -->

	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<!-- persistence-unit is defined in src/main/resources/META_INF/persistence.xml -->
		<property name="persistenceUnitName" value="persistUnit" />
		<property name="dataSource" ref="dataSource" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="showSql" value="true" />
			</bean>
		</property>
		<property name="jpaPropertyMap">
			<map>
				<entry key="hibernate.dialect" value="org.hibernate.dialect.MySQL5InnoDBDialect" />				
				<entry key="hibernate.hbm2ddl.auto" value="update" />
				<entry key="hibernate.format_sql" value="true" />
			</map>
		</property>
	</bean>
	
	<!-- Include the bean for data source, where the properties of the MYSQL DB like url, 
		username and password can be specified. In the template below replace <include connection url> with the 
		actual connection url for connecting to the MYSQL DB. Likewise, replace <include username> and 
		<include password> with the actual username and password values.  
		
		<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
      		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
      		<property name="url" value="jdbc:mysql//<include connection url>:3306/userEnrollment?autoReconnect=true&createDatabaseIfNotExist=true&" />
      		<property name="username" value="<include username>" />
      		<property name="password" value="<include password>" />
		</bean>	
		
		Further note that this file is in XML. That means "&" is a special character. You need to replace every "&" in plain text with "&amp;" 
		inside the MySql connection URL. Otherwise Eclipse or Tomcat will show error 
		"The reference to entity "createDatabaseIfNotExist" must end with the ';' delimiter. ." etc.
		
		See Documentation of org.springframework.jdbc.datasource.DriverManagerDataSource. In a J2EE container, it is recommended to replace it with a 
		JNDI DataSource provided by the container. Such a DataSource can be exposed as a DataSource bean in a Spring ApplicationContext via JndiObjectFactoryBean, 
		for seamless switching to and from a local DataSource bean like this class. If you need a "real" connection pool outside of a J2EE container, consider Apache 
		Commons DBCP or C3P0. Commons DBCP's BasicDataSource and C3P0's ComboPooledDataSource are full connection pool beans, supporting the same basic properties as 
		this class plus specific settings (such as minimal/maximal pool size etc).
		-->
		
		<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
      		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
      		<property name="url" value="jdbc:mysql://localhost:3306/springhibernate1?autoReconnect=true&amp;createDatabaseIfNotExist=true&amp;" />
      		<property name="username" value="suchitto1" />
      		<property name="password" value="suchitto" />
		</bean>	
		
		<!-- This is the bean for transaction manager for scoping/controlling the transactions. -->
		
		<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
			<property name="entityManagerFactory" ref="entityManagerFactory" />
		</bean>

		<tx:annotation-driven transaction-manager="transactionManager" />

</beans>




